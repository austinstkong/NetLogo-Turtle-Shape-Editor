breed [sides side]     ; the four sides of the selection rectangle

sides-own [xt yt pos]

globals [
  ;selected ; inherited
  current-state ; "not-started", "selecting", "waiting-to-drag", "dragging"
  select-x      ; coordinates for the start of the select box
  select-y
  drag-x        ; coordinates for the start of a drag operation
  drag-y
  selected_delta ; Movements is relative to the corner of the selection box
                 ; needed so the selection box can move beyong world boundaries
  sideLeft sideRight sideTop sideBottom
  xmin xmax ymin ymax
]

to setup_select_multiple
  set current-state "not-started"
  set-default-shape sides "line"
  set selected_delta table:make
  set selected no-turtles
  let pos_list ["left" "top" "right" "bottom"]
  if not any? sides [
    create-sides 4 [
      hide-turtle
      set color gray
      set pos first pos_list
      set pos_list but-first pos_list
      set heading ifelse-value member? pos "leftright" [0] [90]
      run (word "set side" pos " self")
      set xt xcor
      set yt ycor
    ]
  ]
end

to select_multiple
  if mode != "select_multiple" [
    set mode "select_multiple"
    setup_select_multiple
  ]
  ; we use a different procedure depending on which state we're in
  ; the procedures will update the `current-state` to the next value as the user clicks
  (ifelse
    (current-state = "not-started")     [ start-selecting ]
    (current-state = "selecting")       [ handle-selecting ]
    (current-state = "waiting-to-drag") [ handle-waiting ]
    (current-state = "dragging")        [ handle-drag ]
  )
end

to start-selecting
  if mouse-down? [
    ; on the first click we see, we record the mouse position as the start of selection
    set select-x round mouse-xcor
    set select-y round mouse-ycor
    set current-state "selecting"
  ]
end

to handle-selecting
  show "handle-selecting"
  ifelse mouse-down? [
    ; we keep updating the selection box as long as the mouse is down
    select select-x select-y round mouse-xcor round mouse-ycor
  ][
    ; user was selecting, but let off the mouse button
    ifelse not any? selected [
      ; if nothing was selected in the box, return to the not-started state
      deselect
      set current-state "not-started"
    ] [
      ; else we are ready to drag
      set current-state "waiting-to-drag"
    ]
  ]
  display
end

to handle-waiting
  if mouse-down? [
    ; on the first click after the selection
    ; check if we're inside or outside the box
    ifelse selected? mouse-xcor mouse-ycor [
      ; inside the box, set the starting drag coordinates
      set drag-x round mouse-xcor
      set drag-y round mouse-ycor
      set current-state "dragging"
    ] [
      ; clicked outside the select box, return to the "selecting" state
      start-selecting
    ]
  ]
end

to handle-drag
  ifelse mouse-down? [
    let new-x round mouse-xcor
    let new-y round mouse-ycor
    ; we need to move both the selected turtles and the sides
    ; of the selection rectangle by the same amount that the
    ; mouse has moved.  we do this by subtracting the current
    ; mouse coordinates from the previous mouse coordinates
    ; and adding the results to the coordinates of the turtles
    ; and sides.
    ask sides [
      ; Holds the "true" position, when it gets dragged outside the world
      set xt xt + new-x - drag-x
      set yt yt + new-y - drag-y
      ifelse is-patch? patch xt yt [
        setxy xt yt
      ] [ ; if it is outside the world, then keep it bounded
        set xcor max list (min-pxcor - 0.49) min list (max-pxcor + 0.49) xt
        set ycor max list (min-pycor - 0.49) min list (max-pycor + 0.49) yt
      ]
    ]
    let xc [xt] of min-one-of sides [xt]
    let yc [yt] of min-one-of sides [yt]
    
    
    ifelse [breed = rectangles] of one-of selected [
      if can_move_rectangle? selected xc yc [
        ask selected [
          move_rectangle (nxc xc) (nyc yc)
        ]
      ]
    ] [
      if can_move_polygon? selected xc yc [
        ask selected [
          setxy (nxc xc) (nyc yc)
        ]
      ]
    ]
    ; update the drag coordinates for the next time through
    ; if the user keeps the mouse button down
    set drag-x new-x
    set drag-y new-y
    display
  ] [
    ; user was dragging, but let off the mouse button
    ; wait for them to click again
    set current-state "waiting-to-drag"
  ]
end

; Get new coordinates after shift
to-report nxc [xc]
  report (xc - item 0 (table:get selected_delta who))
end
to-report nyc [yc]
  report (yc - item 1 (table:get selected_delta who))
end

to deselect
  ask sides [ hide-turtle ]
  ask selected [ set color black ]
  set selected no-turtles
  table:clear selected_delta
end

to select [x1 y1 x2 y2] ; x1 y1 is initial corner and x2 y2 is current corner
  deselect ; hide old selection rectangle
  ; for each side, one thin line shape is created at the mid point of each segment
  ; of the bounding box and scaled to the proper length
  set xmin min list x1 x2  ; smallest xcor is where the left side is
  set xmax max list x1 x2  ; largest xcor is where the right side is
  set ymin min list y1 y2  ; largest ycor is where the top is
  set ymax max list y1 y2  ; smallest ycor is where the bottom is
  ask sideLeft [
    setxy xmin ((y1 + y2) / 2)
    set size ymax - ymin
  ]
  ask sideRight [
    setxy xmax ((y1 + y2) / 2)
    set size ymax - ymin
  ]
  ask sideBottom [
    setxy ((x1 + x2) / 2) ymin
    set size xmax - xmin
  ]
  ask sideTop [
    setxy ((x1 + x2) / 2) ymax
    set size xmax - xmin
  ]
  ask sides [
    set xt xcor
    set yt ycor
    show-turtle
  ]
  set selected turtles with [breed != sides and selected? xcor ycor]
  ask selected [
    set color red
    table:put selected_delta who list (xmin - xcor) (ymin - ycor)
  ]
  show selected_delta
end

; helper procedure that determines whether a point is
; inside the selection rectangle
to-report selected? [x y]
  ; report whether the input coordinates are within the rectangle
  report x >= xmin and x <= xmax and
         y >= ymin and y <= ymax
end