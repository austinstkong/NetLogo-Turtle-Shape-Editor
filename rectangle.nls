breed [rectangles rectangle]

rectangles-own [
  v0 v1 v2 v3
]

to draw_rectangle
  ifelse selected = nobody  [
    ; pick the polygon at the patch under your cursor
    set selected one-of [turtles-here] of patch mouse-xcor mouse-ycor
    if not any? rectangles or (selected = nobody and prev != nobody) [
      ask patch mouse-xcor mouse-ycor [
        sprout-rectangles 1 [
          set selected self
          set shape "circle"
          set color black
          set v0 self
          set v1 nobody
          set v2 nobody
          set v3 nobody
        ]
      ]
    ]
    if prev != nobody and selected != nobody [
      ask selected [
        ifelse link-with prev != nobody [
          ;ask link-with prev [die]
          ;ask prev [die]
        ] [
          if [not any? my-links] of prev and selected != prev [  
            create_rectangle_rest prev
          ]
        ]
      ]
      if selected != nobody [
        watch selected
        ask selected [set color sky]
      ]
    ]
  ] [
    ; if a turtle is selected, move it to the mouse, if no one else is there
    ask selected [
      if can_adjust_rectangle? mouse-xcor mouse-ycor [
        adjust_rectangle mouse-xcor mouse-ycor
        set label (word who ": " xcor " " ycor)
        set color sky
      ]
    ]
  ]
end

; Observer
to create_rectangle [xleft ytop xright ybottom]
  let v0_ nobody
  create-rectangles 1 [ ; v0
    set shape "circle"
    set color black
    set v0 self
    set v1 nobody
    set v2 nobody
    set v3 nobody
    setxy xleft ytop
    set v0_ v0
  ]
  create-rectangles 1 [ ;v2
    set shape "circle"
    set color black
    setxy xright ybottom
    create_rectangle_rest v0_
  ]
end

; Called fromw within v2
to create_rectangle_rest [v0_]
  ; selected aka v2
  set v0 v0_ 
  set v2 self
  
  ask v0_ [  ; v0
    set v2 myself
  ]
  
  hatch-rectangles 1 [ ; v1
    set shape "circle"
    set color black
    set v0 v0_
    set v1 self
    set v2 myself
    set v3 nobody
    setxy [xcor] of v2 [ycor] of v0
    ask v0 [set v1 myself create-link-with myself ]
    ask v2 [set v1 myself create-link-with myself]
  ]
  
  hatch-rectangles 1 [ ; v3
    set shape "circle"
    set color black
    set v0 v0_
    set v1 [v1] of myself
    set v2 myself
    set v3 self
    setxy [xcor] of v0 [ycor] of v2
    ask v0 [set v3 myself create-link-with myself]
    ask v1 [set v3 myself]
    ask v2 [set v3 myself create-link-with myself]
  ]
end

to-report can_adjust_rectangle? [xc yc]
  if [any? rectangles-here] of patch xc yc [report false]
  let flag true
  ask link-neighbors [
    if xcor = [xcor] of myself [
      if any? [rectangles-here] of patch xc ycor [set flag false]
    ]
    if ycor = [ycor] of myself [
      if any? [rectangles-here] of patch xcor yc [set flag false]
    ]
  ]
  report flag
end

to adjust_rectangle [xc yc]
  ask link-neighbors [
    if xcor = [xcor] of myself [
      set xcor round xc
    ]
    if ycor = [ycor] of myself [
      set ycor round yc
    ]
  ]
  move-to patch xc yc
end

to-report can_move_rectangle? [selected_ xc yc]
  let flag true
  ask selected_ [
    let delx xcor - (nxc xc)
    let dely ycor - (nyc yc)
    ask (turtle-set v0 v1 v2 v3) [
      if not is-patch? patch (xcor - delx) (ycor - dely) [
        set flag false
      ]
    ]
  ]
  report flag
end

to move_rectangle [xc yc]
  let delx xcor - xc
  let dely ycor - yc
  ask (turtle-set v0 v1 v2 v3) [
    setxy (xcor - delx) (ycor - dely)
  ]
end

to check_rectangle
  if prev != nobody [
    ask prev [
      let verticies (turtle-set v0 v1 v2 v3)
      if all? verticies [is-turtle? self] [
        set element_string string_rectangle ([xcor] of min-one-of verticies [xcor]) ([ycor] of max-one-of verticies [ycor]) ([xcor] of max-one-of verticies [xcor]) ([ycor] of min-one-of verticies [ycor])
      ] 
    ]
  ]
end

to-report string_rectangle [xleft ytop xright ybottom]
  report (word "Rectangle " color_as_int " " filled? " " marked? " " xleft " " ytop " " xright " " ybottom)
end

to doubleClick_rectangle
  if prev != nobody [
    ask prev [
      foreach (list v0 v1 v2 v3) [ v_ ->
        if v_ != self [
          ask v_ [die]
        ]
      ]
      die
    ]
  ]
end